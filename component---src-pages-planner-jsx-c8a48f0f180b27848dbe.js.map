{"version":3,"sources":["webpack:///./src/components/inputs/selectField.jsx","webpack:///./src/components/inputs/levels.jsx","webpack:///./src/pages/planner.jsx","webpack:///./src/components/inputs/deckPlanner.jsx","webpack:///./src/helper/range.js","webpack:///./src/components/inputs/numOfPlayerField.jsx"],"names":["SelectField","React","forwardRef","ref","children","native","props","select","SelectProps","displayName","propTypes","PropTypes","node","bool","LevelInput","variant","levels","map","level","value","key","useStyles","makeStyles","theme","numOfPlayerField","width","marginTop","spacing","deckPlanner","Planner","classes","useState","numOfPlayers","setNumOfPlayers","gameConfig","setGameConfig","onChange","event","target","className","config","setConfig","dense","table","textAlign","marginBottom","theadErr","backgroundColor","palette","error","main","color","contrastText","tick","display","flex","justifyContent","alignItems","clickable","cursor","Done","style","fontSize","DeckPlannerRow","x","y","row","size","commonCls","active","decks","totalCards","cardsPerPlayer","spareCards","highlight","onClick","TableCell","Radio","name","checked","DeckPlanner","rowData","getCardsPerPlayer","push","getRowData","TableContainer","component","Paper","aria-label","align","TableRow","clsx","invisible","TableBody","i","range","start","end","Array","from","length","v","k","NumOfPlayerField","fullWidth","label","e","MenuItem"],"mappings":"yMAIA,IAAMA,EAAcC,IAAMC,YAAW,WAAiCC,GAAjC,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAWC,E,oIAAxB,iCACjC,kBAAC,IAAD,eACIC,QAAM,EACNC,YAAa,CAAEH,UACfF,IAAKA,GACDG,GACNF,MAINJ,EAAYS,YAAc,cAC1BT,EAAYU,UAAY,CACpBN,SAAUO,IAAUC,KACpBP,OAAQM,IAAUE,MAGPb,O,6ICfFc,EAAa,SAAAR,GACtB,OAAQ,kBAAC,IAAD,eAAaS,QAAQ,UAAaT,GACrCU,IAAOC,KAAI,SAAAC,GAAK,OAAI,kBAAC,IAAD,CAAUC,MAAOD,EAAOE,IAAKF,GAAO,kBAAC,IAAD,CAAcA,MAAOA,W,kCCPtF,4FAMMG,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,iBAAkB,CACdC,MAAO,IACPC,UAAWH,EAAMI,QAAQ,IAE7BC,YAAa,CACTF,UAAWH,EAAMI,QAAQ,QA2BlBE,UAvBC,WACZ,IAAMC,EAAUT,IADE,EAGsBU,mBAAS,IAA1CC,EAHW,KAGGC,EAHH,OAIkBF,mBAAS,MAAtCG,EAJW,KAICC,EAJD,KAUlB,OAAQ,kBAAC,IAAD,KACJ,kBAAC,IAAD,CAAYpB,QAAQ,MAApB,gBACA,kBAAC,IAAD,CAAYA,QAAQ,SAApB,0EACA,kBAAC,IAAD,CACII,MAAOa,EAAcI,SARG,SAAAC,GAC5BJ,EAAgBI,EAAMC,OAAOnB,QAQzBoB,UAAWT,EAAQN,mBAEtBQ,GAAiB,kBAAC,IAAD,CAAKO,UAAWT,EAAQF,aACtC,kBAAC,IAAD,CAAaI,aAAcA,EAAcQ,OAAQN,EAAYO,UAAWN,EAAeO,OAAK,Q,+dC1BxG,IAIMrB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCoB,MAAO,CACH,aAAc,CACVC,UAAW,UAEf,UAAW,CACPC,aAActB,EAAMI,QAAQ,KAGpCmB,SAAU,CACNC,gBAAiBxB,EAAMyB,QAAQC,MAAMC,KACrC,OAAQ,CACJC,MAAO5B,EAAMyB,QAAQC,MAAMG,eAGnCC,KAAM,CACFC,QAAS,OACTC,KAAM,QACNC,eAAgB,SAChBC,WAAY,UAEhBC,UAAW,CACPC,OAAQ,eAgCVN,EAAO,kBAACO,EAAA,EAAD,CAAMC,MAAO,CAAEC,SAAU,MAEhCC,EAAiB,SAAC,GAA+C,IAPjDC,EAAGC,EAOCC,EAA4C,EAA5CA,IAAK1B,EAAuC,EAAvCA,OAAQ2B,EAA+B,EAA/BA,KAAM/B,EAAyB,EAAzBA,SAAa9B,EAAY,wCAC5DwB,EAAO,iBAAQsC,cAAR,GAAwB/C,KAC/BgD,GATeJ,EASYzB,GATfwB,EASUE,IARvBD,GAAKD,EAAEM,QAAUL,EAAEK,OAASN,EAAEO,aAAeN,EAAEM,YACpDP,EAAEQ,iBAAmBP,EAAEO,gBAAkBR,EAAES,aAAeR,EAAEQ,aAOhB,GAE5C,OAAQ,kBAAC,IAAD,iBAAsBnE,EAAtB,CAA6BiC,UAAWT,EAAQ4B,UAAWgB,UAAWL,EAAS,EAAI,EAAGM,QAASvC,IACnG,kBAACwC,EAAA,EAAD,KAAW,kBAACC,EAAA,EAAD,CAAO1B,MAAM,YAAYgB,KAAMA,EAAMW,KAAK,mBACjDC,QAASV,EAAQjC,SAAUA,KAE/B,kBAACwC,EAAA,EAAD,KAAYV,EAAII,OAChB,kBAACM,EAAA,EAAD,KAAYV,EAAIK,YAChB,kBAACK,EAAA,EAAD,KAAYV,EAAIM,gBAChB,kBAACI,EAAA,EAAD,KAAYV,EAAIO,cA2DTO,EA3CK,SAAC,GAA0D,IAAxDxC,EAAuD,EAAvDA,OAAQC,EAA+C,EAA/CA,UAAWT,EAAoC,EAApCA,aAAciB,EAAsB,EAAtBA,MAAU3C,EAAY,mDACpEwB,EAAO,iBAAQsC,cAAR,GAAwB/C,EAAUf,IACzC2E,EA1DS,SAAAjD,GAGf,IAFA,IAAMiD,EAAU,GADe,WAGtBX,GAML,IALA,IAAMC,EAnCS,GAmCID,EACbY,EAAoB,SAAAT,GAAU,OAAKF,EAAaE,GAAczC,GAEhEyC,EAAaF,EAAavC,EAEvByC,EAAaS,EAAkBT,IAvCtB,IAuCsDA,GAAczC,EACpF,KAAOyC,EAAaS,EAAkBT,GAvCtB,IAwCZQ,EAAQE,KAAK,CACTb,QACAC,aACAC,eAAgBU,EAAkBT,GAClCA,eAEJA,GAAczC,GAdbsC,EAAQ,EAAGA,GAAS,IAAKA,EAAQ,EAAjCA,GAgBP,OAAOW,EAuCOG,CAAWpD,GACrBmC,EAAO7D,EAAMoC,MAAQ,QAAU,SAErC,OAAQ,kBAAC2C,EAAA,EAAD,CAAgBC,UAAWC,IAAOhD,UAAWT,EAAQa,OACzD,kBAAC,IAAD,CAAa6C,aAAW,iBAAiBrB,KAAMA,GAC3C,kBAAC,IAAD,CAAesB,MAAM,SAASlD,UAAWU,EAAQnB,EAAQgB,SAAW,MAChE,kBAAC4C,EAAA,EAAD,KACI,kBAACd,EAAA,EAAD,CAAWa,MAAM,UACb,0BAAMlD,UAAWoD,YAAK7D,EAAQuB,KAAMvB,EAAQ8D,YAAavC,IAE7D,kBAACuB,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,yBACA,kBAACA,EAAA,EAAD,sBAGR,kBAACiB,EAAA,EAAD,KACIZ,EAAQhE,KACJ,SAACiD,EAAK4B,GAEF,OAAO,kBAAC,EAAD,CAAgB3B,KAAMA,EAAMD,IAAKA,EAAK1B,OAAQA,EAAQpB,IAAK0E,EAAG1D,SADpD,kBAAMK,EAAUyB,a,wBCnH1C6B,G,oBADD,SAACC,EAAOC,GAAR,OAAgBC,MAAMC,KAAK,CAAEC,OAASH,EAAMD,IAAU,SAACK,EAAGC,GAAJ,OAAUA,EAAIN,O,YCM5EO,EAAmBtG,IAAMC,YAAW,SAACI,EAAOH,GAAR,OACtC,kBAAC,IAAD,eACIqG,WAAS,EACTC,MAAO,iBACPtG,IAAKA,EACLY,QAAQ,UACJT,GACNyF,EAAM,EAAG,IAAI9E,KAAI,SAAAyF,GAAC,OAAI,kBAACC,EAAA,EAAD,CAAUvF,IAAKsF,EAAGvF,MAAOuF,GAAIA,UAIzDH,EAAiB9F,YAAc,mBAEhB8F,Q","file":"component---src-pages-planner-jsx-c8a48f0f180b27848dbe.js","sourcesContent":["import { TextField } from '@material-ui/core'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst SelectField = React.forwardRef(({ children, native, ...props }, ref) => (\n    <TextField\n        select\n        SelectProps={{ native }}\n        ref={ref}\n        {...props}\n    >{children}\n    </TextField>\n))\n\nSelectField.displayName = 'SelectField'\nSelectField.propTypes = {\n    children: PropTypes.node,\n    native: PropTypes.bool\n}\n\nexport default SelectField","import { MenuItem } from '@material-ui/core'\nimport React from 'react'\nimport SelectField from './selectField'\nimport { levels, LevelDisplay } from '../levels'\n\nexport const LevelInput = props => {\n    return (<SelectField variant=\"filled\" {...props}>\n        {levels.map(level => <MenuItem value={level} key={level}><LevelDisplay level={level} /></MenuItem>)}\n    </SelectField>)\n}\n","import { Box, makeStyles, Typography } from '@material-ui/core'\nimport React, { useState } from 'react'\nimport { DeckPlanner, NumOfPlayerField } from '../components/inputs'\nimport Layout from '../components/layout'\n\n\nconst useStyles = makeStyles(theme => ({\n    numOfPlayerField: {\n        width: 200,\n        marginTop: theme.spacing(2)\n    },\n    deckPlanner: {\n        marginTop: theme.spacing(4)\n    }\n}))\n\nconst Planner = () => {\n    const classes = useStyles()\n\n    const [numOfPlayers, setNumOfPlayers] = useState('')\n    const [gameConfig, setGameConfig] = useState(null)\n\n    const handleNumOfPlayerChange = event => {\n        setNumOfPlayers(event.target.value)\n    }\n\n    return (<Layout>\n        <Typography variant=\"h4\">Game Planner</Typography>\n        <Typography variant=\"body2\">Use this tool to decide how many decks should you play your game with.</Typography>\n        <NumOfPlayerField\n            value={numOfPlayers} onChange={handleNumOfPlayerChange}\n            className={classes.numOfPlayerField}\n        />\n        {numOfPlayers && (<Box className={classes.deckPlanner}>\n            <DeckPlanner numOfPlayers={numOfPlayers} config={gameConfig} setConfig={setGameConfig} dense />\n        </Box>)}\n    </Layout>)\n}\n\nexport default Planner","import { makeStyles, Paper, Radio, TableBody, TableCell, TableContainer, TableRow } from '@material-ui/core'\nimport { Done } from '@material-ui/icons'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport commonCls from '../commonClasses'\nimport { DarkTableHead, HighlightableRow, PaddedTable } from '../table'\n\nconst CARDS_PER_DECK = 54\nconst MIN_SPARE_RATIO = 0.2\nconst MAX_SPARE_RATIO = 0.5\n\nconst useStyles = makeStyles(theme => ({\n    table: {\n        '& td, & th': {\n            textAlign: 'center',\n        },\n        '& table': {\n            marginBottom: theme.spacing(0)\n        }\n    },\n    theadErr: {\n        backgroundColor: theme.palette.error.main,\n        '& th': {\n            color: theme.palette.error.contrastText,\n        }\n    },\n    tick: {\n        display: 'flex',\n        flex: '1 1 0',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    clickable: {\n        cursor: 'pointer'\n    }\n}))\n\n\nconst getRowData = numOfPlayers => {\n    const rowData = []\n\n    for (let decks = 2; decks <= 4; ++decks) {\n        const totalCards = decks * CARDS_PER_DECK\n        const getCardsPerPlayer = spareCards => (totalCards - spareCards) / numOfPlayers\n\n        let spareCards = totalCards % numOfPlayers\n\n        while (spareCards / getCardsPerPlayer(spareCards) <= MIN_SPARE_RATIO) spareCards += numOfPlayers\n        while (spareCards / getCardsPerPlayer(spareCards) < MAX_SPARE_RATIO) {\n            rowData.push({\n                decks,\n                totalCards,\n                cardsPerPlayer: getCardsPerPlayer(spareCards),\n                spareCards\n            })\n            spareCards += numOfPlayers\n        }\n    } return rowData\n}\n\nconst configsEqual = (x, y) => (\n    x && y && x.decks === y.decks && x.totalCards === y.totalCards &&\n    x.cardsPerPlayer === y.cardsPerPlayer && x.spareCards === y.spareCards\n)\n\nconst tick = <Done style={{ fontSize: 16 }} />\n\nconst DeckPlannerRow = ({ row, config, size, onChange, ...props }) => {\n    const classes = { ...commonCls(), ...useStyles() }\n    const active = configsEqual(row, config) || false\n\n    return (<HighlightableRow {...props} className={classes.clickable} highlight={active ? 1 : 0} onClick={onChange}>\n        <TableCell><Radio color=\"secondary\" size={size} name=\"set-config-radio\"\n            checked={active} onChange={onChange}\n        /></TableCell>\n        <TableCell>{row.decks}</TableCell>\n        <TableCell>{row.totalCards}</TableCell>\n        <TableCell>{row.cardsPerPlayer}</TableCell>\n        <TableCell>{row.spareCards}</TableCell>\n    </HighlightableRow>)\n}\n\nDeckPlannerRow.propTypes = {\n    row: PropTypes.exact({\n        decks: PropTypes.number.isRequired,\n        totalCards: PropTypes.number.isRequired,\n        cardsPerPlayer: PropTypes.number.isRequired,\n        spareCards: PropTypes.number.isRequired\n    }).isRequired,\n    config: PropTypes.object,\n    size: PropTypes.oneOf(['inherit', 'small', 'medium']),\n    onChange: PropTypes.func\n}\n\nconst DeckPlanner = ({ config, setConfig, numOfPlayers, error, ...props }) => {\n    const classes = { ...commonCls(), ...useStyles(props) }\n    const rowData = getRowData(numOfPlayers)\n    const size = props.dense ? 'small' : 'medium'\n\n    return (<TableContainer component={Paper} className={classes.table}>\n        <PaddedTable aria-label=\"table of decks\" size={size}>\n            <DarkTableHead align=\"center\" className={error ? classes.theadErr : null}>\n                <TableRow>\n                    <TableCell align=\"center\">\n                        <span className={clsx(classes.tick, classes.invisible)}>{tick}</span>\n                    </TableCell>\n                    <TableCell>Decks</TableCell>\n                    <TableCell>Total Cards</TableCell>\n                    <TableCell>Cards per Player</TableCell>\n                    <TableCell>Spare Cards</TableCell>\n                </TableRow>\n            </DarkTableHead>\n            <TableBody>{\n                rowData.map(\n                    (row, i) => {\n                        const onChange = () => setConfig(row)\n                        return <DeckPlannerRow size={size} row={row} config={config} key={i} onChange={onChange} />\n                    }\n                )\n            }</TableBody>\n        </PaddedTable>\n    </TableContainer>)\n}\n\nDeckPlanner.propTypes = {\n    numOfPlayers: PropTypes.number.isRequired,\n    dense: PropTypes.bool,\n    config: PropTypes.exact({\n        decks: PropTypes.number.isRequired,\n        totalCards: PropTypes.number.isRequired,\n        cardsPerPlayer: PropTypes.number.isRequired,\n        spareCards: PropTypes.number.isRequired\n    }),\n    setConfig: PropTypes.func.isRequired,\n    error: PropTypes.bool\n}\n\nexport default DeckPlanner","const range = (start, end) => Array.from({ length: (end - start) }, (v, k) => k + start)\nexport default range","import { MenuItem } from '@material-ui/core'\nimport React from 'react'\nimport range from '../../helper/range'\nimport SelectField from './selectField'\n\n\nconst NumOfPlayerField = React.forwardRef((props, ref) => (\n    <SelectField\n        fullWidth\n        label={'No. of Players'}\n        ref={ref}\n        variant=\"filled\"\n        {...props}\n    >{range(4, 11).map(e => <MenuItem key={e} value={e}>{e}</MenuItem>)}\n    </SelectField>\n))\n\nNumOfPlayerField.displayName = 'NumOfPlayerField'\n\nexport default NumOfPlayerField\n"],"sourceRoot":""}